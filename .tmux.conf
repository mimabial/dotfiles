# -- general -------------------------------------------------------------------

# Enable 24-bit true color support
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",xterm-256color:Tc"
set -ga terminal-overrides ",*256col*:Tc"
set -ga terminal-overrides ",alacritty:RGB"

# Support for italics and bold italics
set -as terminal-overrides ',xterm*:sitm=\E[3m:ritm=\E[23m'
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colors

# word separators for automatic word selection
setw -g word-separators ' @"=()[]'
setw -ag word-separators "'"

# Set the prefix to Ctrl+a (easier to reach)
set -g prefix C-a

# Remove the old prefix
unbind C-b

# Send Ctrl+a to applications by pressing it twice
bind C-a send-prefix

# Use vi keys in copy mode
setw -g mode-keys vi

# vi key bindings in tmux command prompt
set -g status-keys vi

# Reduce escape time for faster response in Vim
set -sg escape-time 0

set -wg xterm-keys on
set -sg extended-keys always
set -as terminal-features 'xterm*:extkeys'

# Focus events enabled for terminals that support them
set -g focus-events on

# Super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

# Increase scrollback buffer size from 2000 to 50000 lines
set -g history-limit 50000

# Increase tmux messages display duration from 750ms to 4s
set -g display-time 4000

# Set bind key to reload configuration file
bind r source-file ~/.tmux.conf \; display "Reloaded!"

bind -r C-R \
  set @mode_indicator_custom_prompt "  RELOADING " \; \
  set @mode_indicator_custom_mode_style 'fg=#3c474d,bg=#e67e80,italics' \; \
  source-file "$HOME/.tmux.conf" \; \
  set -u @mode_indicator_custom_prompt \; \
  set -u @mode_indicator_custom_mode_style \; \
  refresh-client \;

bind r refresh-client

# clear both screen and history (vim-like)
bind C-l send-keys -R \; run 'sleep 0.2' \; clear-history \; display "Screen cleared!"
bind C-q send-keys -R \; run 'sleep 0.2' \; clear-history \; display "Screen cleared!"

# toggle mouse with more descriptive message
bind m set -g mouse \; display "Mouse: #{?mouse,ON,OFF}"

set -g allow-passthrough on

# -- mouse -------------------------------------------------------------------

# Basic mouse support
set -g mouse on

# Scroll without changing pane
bind -n WheelUpPane if-shell -F "#{mouse_any_flag}" "send-keys -M" \
    "if -Ft= '#{alternate_on}' \
        'send-keys -t= up' \
        'if -Ft= \"#{pane_in_mode}\" \
            \"select-pane -t=; send-keys -M\" \
            \"select-pane -t=; copy-mode -e; send-keys -M\"'"

# scroll in the moused-over pane
bind -n WheelDownPane if-shell -F "#{mouse_any_flag}" "send-keys -M" \
    "if -Ft= '#{alternate_on}' \
        'send-keys -t= down' \
        'select-pane -t=; send-keys -M'"

# For tmux 2.4+ in copy-mode
bind -T copy-mode-vi WheelUpPane select-pane \; send-keys -X -N 3 scroll-up
bind -T copy-mode-vi WheelDownPane select-pane \; send-keys -X -N 3 scroll-down
bind -T copy-mode WheelUpPane select-pane \; send-keys -X -N 3 scroll-up
bind -T copy-mode WheelDownPane select-pane \; send-keys -X -N 3 scroll-down

# -- open -------------------------------------------------------------------

# Helper functions
is_osx="[[ $(uname) == 'Darwin' ]]"
is_linux="[[ $(uname) == 'Linux' ]]"
get_os_open_cmd="if $is_osx; then echo 'open'; elif $is_linux; then echo 'xdg-open'; else echo 'cygstart'; fi"

# Open with default application
bind -T copy-mode-vi o send-keys -X copy-pipe-and-cancel "tmux set-buffer -- \"$(cat -)\"; tmux show-buffer | sed 's/\\s/+/g' | xargs -I {} tmux run-shell -b 'cd #{pane_current_path}; $($get_os_open_cmd) \"{}\" > /dev/null'"
bind -T copy-mode o send-keys -X copy-pipe-and-cancel "tmux set-buffer -- \"$(cat -)\"; tmux show-buffer | sed 's/\\s/+/g' | xargs -I {} tmux run-shell -b 'cd #{pane_current_path}; $($get_os_open_cmd) \"{}\" > /dev/null'"

# Open with $EDITOR
bind -T copy-mode-vi C-o send-keys -X copy-pipe-and-cancel "tmux set-buffer -- \"$(cat -)\"; tmux show-buffer | xargs -I {} tmux send-keys '$EDITOR -- \"{}\"'; tmux send-keys 'C-m'"
bind -T copy-mode C-o send-keys -X copy-pipe-and-cancel "tmux set-buffer -- \"$(cat -)\"; tmux show-buffer | xargs -I {} tmux send-keys '$EDITOR -- \"{}\"'; tmux send-keys 'C-m'"

# Search with DuckDuckGo
bind -T copy-mode-vi S send-keys -X copy-pipe-and-cancel "tmux set-buffer -- \"$(cat -)\"; tmux show-buffer | sed 's/\\s/+/g' | xargs -I {} tmux run-shell -b 'cd #{pane_current_path}; $($get_os_open_cmd) \"https://duckduckgo.com/?q={}\" > /dev/null'"
bind -T copy-mode S send-keys -X copy-pipe-and-cancel "tmux set-buffer -- \"$(cat -)\"; tmux show-buffer | sed 's/\\s/+/g' | xargs -I {} tmux run-shell -b 'cd #{pane_current_path}; $($get_os_open_cmd) \"https://duckduckgo.com/?q={}\" > /dev/null'"

# -- display -------------------------------------------------------------------

set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

set -g allow-rename on
setw -g automatic-rename on   # rename window to reflect current program
set -g automatic-rename-format "#{pane_current_command}"

set -g renumber-windows on    # renumber windows when a window is closed

# Set parent terminal title to reflect current window in tmux session 
set -g set-titles on
set -g set-titles-string "◫ #S:#I#($HOME/.local/bin/tmux-fancy-numbers\ #P) ◦ #{pane_current_command}"
set -g display-time 1000 # tmux messages are displayed for n milliseconds
set -g display-panes-time 800 # slightly longer pane indicators display time

# activity
set -g monitor-activity on
set -g visual-activity off

# -- navigation ----------------------------------------------------------------

# create session with current directory name
bind C-c new-session -c "#{pane_current_path}" -A -s "#{b:pane_current_path}"

# find session with fuzzy finding
bind C-f command-prompt -p "Find session:" "switch-client -t '%%'"

# Session management
bind S choose-session        # Session chooser
bind A move-window -t 0 \; move-window -r

# Create new window with Alt+c (vim-like 'create')
bind -n M-c new-window -c "#{pane_current_path}"

# Kill window with Alt+k (vim-like 'kill')
unbind &
bind -n M-k kill-window
bind -n M-w kill-window      # Additional vim-like binding

# Window navigation - vim-style with Alt modifier
bind -n M-p previous-window  # prev
bind -n M-n next-window      # next
bind -n M-h previous-window  # vim-like left
bind -n M-l next-window      # vim-like right
# Quick window selection with Alt+number
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9

# Window organization commands (vim-like)
bind R move-window -r \; display 'Windows renumbered'
bind > swap-window -t +1 \; next-window          # Move window right
bind < swap-window -t -1 \; previous-window      # Move window left
bind -r . swap-window -t +1 \; next-window       # Repeatable version
bind -r , swap-window -t -1 \; previous-window   # Repeatable version

# Split panes with vim-like keys
unbind '"'
unbind %
bind s split-window -v -c "#{pane_current_path}"    # vim-like split
bind v split-window -h -c "#{pane_current_path}"    # vim-like vsplit
bind _ split-window -v -c "#{pane_current_path}"    # keep original
bind | split-window -h -c "#{pane_current_path}"    # keep original

# Vim style pane navigation (with prefix)
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Direct Ctrl navigation (consistent with vim-tmux-navigator)
bind C-h select-pane -L
bind C-j select-pane -D
bind C-k select-pane -U
bind C-l select-pane -R

# Vim style pane resizing
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Smart pane management
bind L move-pane -h -t '.-' # stack horizontally
bind H move-pane -t '.-'    # stack vertically

# Zoom pane
bind z resize-pane -Z

# Synchronize panes toggle
bind y setw synchronize-panes \; display "Synchronize: #{?synchronize-panes,ON,OFF}"

# Kill pane with prefix+q (vim-like)
bind q kill-pane
bind x kill-pane         # Keep original binding as well

# -- vim-like session/window management --
bind C-w command-prompt -p "Window name:" "rename-window '%%'"
bind C-r command-prompt -p "Session name:" "rename-session '%%'"

# -- vim-like buffer/clipboard operations --
bind -T copy-mode-vi a send -X cancel \; run-shell 'tmux select-pane -t "#{pane_id}"; tmux copy-mode; tmux send-keys -X select-line; tmux send-keys -X copy-pipe-and-cancel "pbcopy"'
bind C-y run-shell 'tmux show-buffer | pbcopy' \; display "Buffer copied to clipboard"

# -- vim-like marks (using tmux's built-in functionality) --
bind m command-prompt -p "Save pane as:" "capture-pane -p > ~/.tmux_pane_%%"
bind "'" command-prompt -p "Load pane:" "send-keys 'cat ~/.tmux_pane_%% && rm ~/.tmux_pane_%%' Enter"

# -- vim-like tabs (windows) with more intuitive bindings --
bind t new-window -c "#{pane_current_path}"
bind T command-prompt -p "New window name:" "new-window -c '#{pane_current_path}' -n '%%'"

# -- vim-like fold/unfold for panes --
bind C-z if-shell -F '#{window_zoomed_flag}' 'resize-pane -Z' 'resize-pane -Z'

# -- vim-like split navigation enhancements --
bind C-w run-shell 'tmux choose-tree -Zw'  # window chooser (like :windows in vim)
bind C-t run-shell 'tmux choose-tree -Zs'  # session chooser (like :tabs in vim)

# -- vim-like search in copy mode (enhanced) --
bind -T copy-mode-vi * send -X search-backward "#{copy_cursor_word}"
bind -T copy-mode-vi # send -X search-forward "#{copy_cursor_word}"

# -- vim-like command mode shortcuts --
bind : command-prompt
bind ';' last-pane

# -- vim-like visual block selection improvements --
bind -T copy-mode-vi C-v send -X rectangle-toggle \; send -X begin-selection
bind -T copy-mode-vi A send -X end-of-line \; send -X cursor-left \; send -X begin-selection
bind -T copy-mode-vi I send -X back-to-indentation \; send -X begin-selection

# -- vim-like increment/decrement for window numbers --
bind + run-shell 'tmux move-window -t $(expr $(tmux display-message -p "#{window_index}") + 1)'
bind - run-shell 'tmux move-window -t $(expr $(tmux display-message -p "#{window_index}") - 1)'

# -- vim-like substitute for renaming --
bind C-s command-prompt -p "Rename session:" "rename-session '%%'"

# -- copy mode -----------------------------------------------------------------

# Override tmux default mouse yank
run -b -d 1 'tmux bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-no-clear'

# vi-copy bindings that follow vim settings
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi V send -X begin-selection \; send -X start-of-line \; send -X cursor-right \; send -X end-of-line
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-pipe-and-cancel "pbcopy"
bind -T copy-mode-vi Y send -X copy-pipe-and-cancel \; paste-buffer -p
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi q send -X clear-selection

# Additional vim-like bindings for copy mode
bind -T copy-mode-vi C-u send -X halfpage-up
bind -T copy-mode-vi C-d send -X halfpage-down
bind -T copy-mode-vi C-b send -X page-up
bind -T copy-mode-vi C-f send -X page-down
bind -T copy-mode-vi H send -X top-line
bind -T copy-mode-vi L send -X bottom-line
bind -T copy-mode-vi M send -X middle-line
bind -T copy-mode-vi 0 send -X start-of-line
bind -T copy-mode-vi ^ send -X back-to-indentation
bind -T copy-mode-vi $ send -X end-of-line
bind -T copy-mode-vi w send -X next-word
bind -T copy-mode-vi b send -X previous-word
bind -T copy-mode-vi e send -X next-word-end
bind -T copy-mode-vi G send -X history-bottom
bind -T copy-mode-vi g send -X history-top

# Search in copy mode
bind -T copy-mode-vi / command-prompt -i -p "Search down:" "send -X search-forward-incremental \"%%%\""
bind -T copy-mode-vi ? command-prompt -i -p "Search up:" "send -X search-backward-incremental \"%%%\""
bind -T copy-mode-vi n send -X search-again
bind -T copy-mode-vi N send -X search-reverse

# -- buffers -------------------------------------------------------------------

unbind ]
bind b list-buffers     # list paste buffers
bind p paste-buffer     # paste buffer
bind P choose-buffer    # choose which buffer to paste from
bind ? list-keys

# -- status bar ------------------------------------------------------------

set -g status-interval 1      # redraw status line more frequently
set -g status on 
set -g status-format[1] "#[bg=default]"
set -g status-justify left
set -g status-position top

# -- theme/colors/layout/statusbar ----------------------------------------------
if-shell 'test -f "$XDG_CONFIG_HOME/tmux/megaforest.tmux.conf"' 'source -q $XDG_CONFIG_HOME/tmux/megaforest.tmux.conf'

# -- notes ------------------------------------------------------------------------
bind C-n display-popup -EE -T "quick note" -w "60%" -h "50%" "note"
bind C-o run-shell "$HOME/.local/bin/daily_note -m note"
bind C-e run-shell "tmux neww nvim +c :Telescope find_files cwd=$HOME/Documents/_notes"

# -- slack ------------------------------------------------------------------------
bind C-s display-popup -w "25%" -h "25%" "export TMUX_POPUP=1 && fslck; tmux display-popup -C"

# use vim keybindings in search/copy mode
setw -g other-pane-height 25
setw -g other-pane-width 80

# turn off status-line for scratch sessions
set-hook -g client-session-changed {
  if-shell -F '#{==:#{session_name},slack}' { set -s status off } { set -s status on }
  if-shell -F '#{==:#{session_name},weechat}' { set -s status off } { set -s status on }
  if-shell -F '#{==:#{session_name},scratch}' { set -s status off } { set -s status on }
}

# = sessions -------------------------------------------------------------------

# create new session
bind C-c command-prompt -p " new session ->" "run-shell \"ftm %1\""

# -- popups ---------------------------------------------------------------------

bind C-Space display-popup -T " sessions " -w "40%" -h "50%" "ftm -p && tmux display-popup -C"

# switch to main session if switch-client -l fails
bind -r C-l run-shell "\
  tmux switch-client -l; \
  if [ $? -eq 0 ]; then \
    tmux refresh-client; \
  else \
    tmux switch-client -t mega; \
    tmux refresh-client; \
  fi; \
"

bind -r g display-popup -w "80%" -h "80%" -d "#{pane_current_path}" -E "lazygit"
bind -r C-g display-popup -w "80%" -h "80%" -d "#{pane_current_path}" -E "lazygit"

# -- plugins settings -------------------------------------------------------

## -- tmux-mode-indicator
session_icon=""
session_fg="#d8caac"
session_bg="#323d43"

# prompt to display when tmux prefix key is pressed
set -g @mode_indicator_prefix_prompt "  WAIT  " # alts: …
# prompt to display when tmux is in copy mode
set -g @mode_indicator_copy_prompt "  COPY  "
# prompt to display when tmux has synchronized panes
set -g @mode_indicator_sync_prompt " 󰓦 SYNC "
# prompt to display when tmux is in normal mode
set -g @mode_indicator_empty_prompt " #S #U " # alts: (\uf490)﬿
# style values for prefix prompt
set -g @mode_indicator_prefix_mode_style 'fg=#e67e80,bg=#323d43,italics'
# style values for copy prompt
set -g @mode_indicator_copy_mode_style 'fg=#3c474d,bg=#d9bb80,bold'
# style values for sync prompt
set -g @mode_indicator_sync_mode_style 'fg=black,bg=#e67e80,italics'
# style values for empty prompt
set -g @mode_indicator_empty_mode_style "fg=${session_fg},bg=${session_bg},bold"

## -- tmux-jump
set -g @jump-key 'f'

# vim-tmux-navigator key bindings
set -g @vim_navigator_mapping_left "C-h"  # Simplified to just C-h
set -g @vim_navigator_mapping_right "C-l"
set -g @vim_navigator_mapping_up "C-k"
set -g @vim_navigator_mapping_down "C-j"
set -g @vim_navigator_mapping_prev ""  # removes the C-\ binding
## disable the automatic mapping of <prefix> C-l to send C-l
set -g @vim_navigator_prefix_mapping_clear_screen ""

# resurrection settings
set -g @resurrect-processes 'true'
set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'

# Enable auto-save and restore
set -g @continuum-restore 'on'
set -g @continuum-save-interval '10'

## -- tmux-pomodoro-plus
set -g @pomodoro_notifications 'off'

set -g @pomodoro_toggle 'o'                    # Start/pause a Pomodoro/break
set -g @pomodoro_cancel 'O'                    # Cancel the current session
set -g @pomodoro_skip '-'                      # Skip a Pomodoro/break

set -g @pomodoro_mins 25                       # The duration of the Pomodoro
set -g @pomodoro_break_mins 5                  # The duration of the break
set -g @pomodoro_intervals 4                   # The number of intervals before a longer break
set -g @pomodoro_long_break_mins 25            # The duration of the long break
set -g @pomodoro_repeat 'off'                  # Automatically repeat the Pomodoros?

set -g @pomodoro_on "#[fg=green]"
set -g @pomodoro_complete "#[fg=red]"
set -g @pomodoro_pause "#[fg=yellow]"
set -g @pomodoro_prompt_break "⏲︎ break?"
set -g @pomodoro_prompt_pomodoro "⏱︎ start?"
set -g @pomodoro_show_intervals "#[fg=$color_gray] [%s/%s]"

set -g @pomodoro_menu_position "R"
set -g @pomodoro_sound 'Pop'
set -g @pomodoro_notifications 'on'
set -g @pomodoro_granularity 'on'

# Initialize tmux plugins
run-shell $XDG_CONFIG_HOME/tmux/plugins/tmux-jump/tmux-jump.tmux
run-shell $XDG_CONFIG_HOME/tmux/plugins/tmux-resurrect/resurrect.tmux
run-shell $XDG_CONFIG_HOME/tmux/plugins/tmux-continuum/continuum.tmux
run-shell $XDG_CONFIG_HOME/tmux/plugins/vim-tmux-navigator/vim-tmux-navigator.tmux
run-shell $XDG_CONFIG_HOME/tmux/plugins/tmux-better-mouse-mode/scroll_copy_mode.tmux
run-shell $XDG_CONFIG_HOME/tmux/plugins/tmux-open/open.tmux
run-shell $XDG_CONFIG_HOME/tmux/plugins/tmux-mode-indicator/mode_indicator.tmux
run-shell $XDG_CONFIG_HOME/tmux/plugins/tmux-pomodoro-plus/pomodoro.tmux
run-shell $XDG_CONFIG_HOME/tmux/plugins/tmux-current-pane-hostname/current_pane_hostname.tmux
run-shell $XDG_CONFIG_HOME/tmux/plugins/tmux-battery/battery.tmux
run-shell $XDG_CONFIG_HOME/tmux/plugins/tmux-cpu/cpu.tmux
